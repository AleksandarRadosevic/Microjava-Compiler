




package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   	int lineDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol){
            msg.append (" na liniji ").append(((Symbol)info).left);
            lineDetected = ((Symbol)info).left;
        }
        log.error(msg.toString());
    }


:}

init with {:
	lineDetected = 0;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal Integer NUMBER;
terminal Boolean BOOLCONST;
terminal String IDENT;
terminal Character CHARCONST;

terminal PROG, LBRACECURLY, RBRACECURLY, CONST, ASSIGN, EQUAL, NOTEQUAL, GREATER, GREATEREQUAL, THIS, SUPER, ENUM;
terminal COMMA, CLASS, EXTENDS, RECORD, LPAREN, RPAREN, VOID, PRINT, GOTO, AND, NEW, DOT, PLUS, MINUS, MUL, DIV, MOD, COLON;
terminal IF, SEMICOLON, DO, WHILE, BREAK, CONTINUE, RETURN, READ, LBRACE, RBRACE, INCREMENT, DECREMENT,LOWER, LOWEREQUAL, OR, ELSE;
terminal DEGREE, THREEDOTS;

nonterminal DeclarationList DeclarationList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal RecordDecl RecordDecl;
nonterminal ConstVal ConstVal;
nonterminal ConstDeclList ConstDeclList;
nonterminal OptionalBraces OptionalBraces;
nonterminal VarDeclList VarDeclList;
nonterminal OptionalExtends OptionalExtends;
nonterminal DeclListVar DeclListVar;
nonterminal DeclList DeclList;
nonterminal OptConstructorMethod OptConstructorMethod;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal OptionalConstructorDecl OptionalConstructorDecl;
nonterminal DeclListMethod DeclListMethod;
nonterminal StatementList StatementList;
nonterminal FormParsOptional FormParsOptional;
nonterminal Statement Statement;
nonterminal FormPars FormPars;
nonterminal Pars Pars;
nonterminal ParsList ParsList;
nonterminal SingleStatement SingleStatement;
nonterminal Label Label;
nonterminal LabelColon LabelColon;
nonterminal Condition Condition;
nonterminal OptionalElse OptionalElse;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorStatementElements DesignatorStatementElements;
nonterminal ExprCommaList ExprCommaList;
nonterminal OptionalNumConst OptionalNumConst;
nonterminal Statements Statements;
nonterminal OptionalExpression OptionalExpression;
nonterminal ActParsOptional ActParsOptional;
nonterminal ActPars ActPars;
nonterminal CondTerm CondTerm;
nonterminal CondTermListOr CondTermListOr;
nonterminal CondFactListAnd CondFactListAnd;
nonterminal CondFact CondFact;
nonterminal RelopOprOptional RelopOprOptional;
nonterminal Relop Relop;
nonterminal OptionalMinus OptionalMinus;
nonterminal AddopTermList AddopTermList;
nonterminal Addop Addop;
nonterminal MulopFactorList MulopFactorList;
nonterminal Mulop Mulop;
nonterminal ExprBracesOptional ExprBracesOptional;
nonterminal IdentList IdentList;
nonterminal DotOrExpr DotOrExpr;
nonterminal Assignop Assignop;
nonterminal ConditionIf ConditionIf;
nonterminal IdentListelem IdentListelem;
nonterminal VarDeclGlobal VarDeclGlobal;
nonterminal VarDeclListGlobal VarDeclListGlobal;
nonterminal Expop Expop;
nonterminal ListBaseExp ListBaseExp;
nonterminal VarArgs VarArgs;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodTypeName, MethodDecl, Designator, DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, TypeOrVoid, Term, Factor, Expr, BaseExp;

precedence left ELSE;


Program ::= (Programc) PROG ProgName:p DeclarationList:D1 LBRACECURLY DeclListMethod:D2 RBRACECURLY {: RESULT=new Programc(p, D1, D2); RESULT.setLine(pleft); :};

ProgName ::= (ProgNamec) IDENT:progName {: RESULT=new ProgNamec(progName); RESULT.setLine(progNameleft); :};

DeclarationList ::= (DeclarationListc) DeclarationList:D1 DeclList:D2 {: RESULT=new DeclarationListc(D1, D2); RESULT.setLine(D1left); :}
				| (NoDeclarations) {: RESULT=new NoDeclarations(); :} /* epsilon */;
				
DeclList ::= (DeclListc)  ConstDecl:C1 {: RESULT=new DeclListc(C1); RESULT.setLine(C1left); :}
			| VarDeclGlobal:V1 {: RESULT=new DeclListDerived1(V1); RESULT.setLine(V1left); :}
			| ClassDecl:C1 {: RESULT=new DeclListDerived2(C1); RESULT.setLine(C1left); :}
			| RecordDecl:R1 {: RESULT=new DeclListDerived3(R1); RESULT.setLine(R1left); :};

ConstDecl ::= (ConstDeclc) CONST Type:constType IDENT:name ASSIGN ConstVal:C1 ConstDeclList:C2 SEMICOLON {: RESULT=new ConstDeclc(constType, name, C1, C2); RESULT.setLine(constTypeleft); :}
			| (ErrorConstDeclEnd) error SEMICOLON:l
		    {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorConstDeclEnd(); :}
		    ;


ConstVal ::= (ConstInt) NUMBER:N1 {: RESULT=new ConstInt(N1); RESULT.setLine(N1left); :} |
			(ConstChar) CHARCONST:C1 {: RESULT=new ConstChar(C1); RESULT.setLine(C1left); :} |
			(ConstBool) BOOLCONST:B1 {: RESULT=new ConstBool(B1); RESULT.setLine(B1left); :};

ConstDeclList ::= (ConstDeclListc) ConstDeclList:C1 COMMA IDENT:I2 ASSIGN ConstVal:C3 {: RESULT=new ConstDeclListc(C1, I2, C3); RESULT.setLine(C1left); :}  
				| (ErrorComma) error
		    	{: parser.report_error("Izvrsen oporavak do , u okviru definisanje globalnih promenljivih ", null);  :} {: RESULT=new ErrorComma(); :}
				| (NoConstDecl) {: RESULT=new NoConstDecl(); :} /* epsilon */;
	

VarDeclGlobal ::= (VarDeclGlobalc) Type:varType IDENT:varName OptionalBraces:O1 VarDeclListGlobal:V2 SEMICOLON {: RESULT=new VarDeclGlobalc(varType, varName, O1, V2); RESULT.setLine(varTypeleft); :};

VarDecl ::= (VarDeclc) Type:varType IDENT:varName OptionalBraces:O1 VarDeclList:V2 SEMICOLON {: RESULT=new VarDeclc(varType, varName, O1, V2); RESULT.setLine(varTypeleft); :};

OptionalBraces ::= (OptionalBracesc) LBRACE RBRACE {: RESULT=new OptionalBracesc(); :} 
				| (NoOptionalBraces) {: RESULT=new NoOptionalBraces(); :} /* epsilon */;

VarDeclList ::= (VarDeclListc) VarDeclList:V1 COMMA IDENT:I2 OptionalBraces:O3 {: RESULT=new VarDeclListc(V1, I2, O3); RESULT.setLine(V1left); :}  
				| (NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */;
			
				
VarDeclListGlobal ::= (VarDeclListGlobalc) VarDeclListGlobal:V1 COMMA IDENT:I2 OptionalBraces:O3 {: RESULT=new VarDeclListGlobalc(V1, I2, O3); RESULT.setLine(V1left); :}  
				| (NoVarDeclListGlobalc) {: RESULT=new NoVarDeclListGlobalc(); :} /* epsilon */;
								
				
ClassDecl ::= (ClassDeclc) CLASS IDENT:I1 OptionalExtends:O2 LBRACECURLY DeclListVar:D3 OptConstructorMethod:O4 RBRACECURLY {: RESULT=new ClassDeclc(I1, O2, D3, O4); RESULT.setLine(I1left); :};			 

OptionalExtends ::= (OptionalExtendsc) EXTENDS Type:T1 {: RESULT=new OptionalExtendsc(T1); RESULT.setLine(T1left); :}
				| (NoOptionalExtendsc) {: RESULT=new NoOptionalExtendsc(); :} /* epsilon */;
 
DeclListVar ::=	(DeclListVarc) DeclListVar:D1 VarDecl:V2 {: RESULT=new DeclListVarc(D1, V2); RESULT.setLine(D1left); :} 
				| (NoDeclListVar) {: RESULT=new NoDeclListVar(); :} /* epsilon */;	

/* treba da bude constructordecl optional */
OptConstructorMethod ::= (OptConstructorMethodc) LBRACECURLY DeclListMethod:D1 RBRACECURLY {: RESULT=new OptConstructorMethodc(D1); RESULT.setLine(D1left); :}
				| (NoOptConstructorMethod) {: RESULT=new NoOptConstructorMethod(); :} /* epsilon */;	
				
OptionalConstructorDecl ::= (OptionalConstructorDeclc) ConstructorDecl:C1 {: RESULT=new OptionalConstructorDeclc(C1); RESULT.setLine(C1left); :}
				| (NoOptionalConstructorDecl) {: RESULT=new NoOptionalConstructorDecl(); :} /* epsilon */;	
				
DeclListMethod ::= (DeclListMethodc) DeclListMethod:D1 MethodDecl:M2 {: RESULT=new DeclListMethodc(D1, M2); RESULT.setLine(D1left); :} 
				| (NoDeclListMethod) {: RESULT=new NoDeclListMethod(); :} /* epsilon */;	


RecordDecl ::= (RecordDeclc) RECORD IDENT:I1 LBRACECURLY DeclListVar:D2 RBRACECURLY {: RESULT=new RecordDeclc(I1, D2); RESULT.setLine(I1left); :};

ConstructorDecl ::= (ConstructorDeclc) IDENT:I1 LPAREN RPAREN DeclListVar:D2 LBRACECURLY StatementList:S3 RBRACECURLY {: RESULT=new ConstructorDeclc(I1, D2, S3); RESULT.setLine(I1left); :};


MethodDecl ::= (MethodDeclc) MethodTypeName:M1 LPAREN FormParsOptional:pars  DeclListVar:D2 LBRACECURLY StatementList:S3 RBRACECURLY {: RESULT=new MethodDeclc(M1, pars, D2, S3); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeNamec) Type:varType IDENT:methodName {: RESULT=new MethodTypeNamec(varType, methodName); RESULT.setLine(varTypeleft); :}
				| (VoidFunc) VOID IDENT:methodName {: RESULT=new VoidFunc(methodName); RESULT.setLine(methodNameleft); :};


TypeOrVoid ::= (TypeOrVoidc) Type:returnType {: RESULT=new TypeOrVoidc(returnType); RESULT.setLine(returnTypeleft); :} | VOID {: RESULT=new TypeOrVoidDerived1(); :};

FormParsOptional ::= (FormParsOptionalc) FormPars:F1 {: RESULT=new FormParsOptionalc(F1); RESULT.setLine(F1left); :}
				| FormPars:F1 COMMA VarArgs:V2 {: RESULT=new FormParsOptionalDerived1(F1, V2); RESULT.setLine(F1left); :}
				| VarArgs:V1 {: RESULT=new FormParsOptionalDerived2(V1); RESULT.setLine(V1left); :}
				| RPAREN {: RESULT=new FormParsOptionalDerived3(); :};
						
						
FormPars ::= (FormParsc) Pars:P1 ParsList:P2 RPAREN {: RESULT=new FormParsc(P1, P2); RESULT.setLine(P1left); :}
			| (ErrorFormPars) error RPAREN:l
		   	{: parser.report_error("Izvrsen oporavak do ) u liniji "+ lleft, null);  :} {: RESULT=new ErrorFormPars(); :};
		
Pars ::= (Parsc) Type:typeName IDENT:name {: RESULT=new Parsc(typeName, name); RESULT.setLine(typeNameleft); :}
	  | Type:typeName IDENT:name LBRACE RBRACE {: RESULT=new ParsDerived1(typeName, name); RESULT.setLine(typeNameleft); :};

ParsList ::= (ParsListc) ParsList:P1 COMMA Pars:P2 {: RESULT=new ParsListc(P1, P2); RESULT.setLine(P1left); :} 
			| (NoParsList) {: RESULT=new NoParsList(); :} /* epsilon */;

Type ::= (Typec) IDENT:typeName {: RESULT=new Typec(typeName); RESULT.setLine(typeNameleft); :};


Statement ::= (Statementc) LabelColon:L1 SingleStatement:S2 {: RESULT=new Statementc(L1, S2); RESULT.setLine(L1left); :} 
			| (ErrorStmt) error SEMICOLON:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
			| SingleStatement:S1 {: RESULT=new StatementDerived1(S1); RESULT.setLine(S1left); :}
			| Statements:S1 {: RESULT=new StatementDerived2(S1); RESULT.setLine(S1left); :};
			


LabelColon ::= (LabelColonc) Label:L1 COLON {: RESULT=new LabelColonc(L1); RESULT.setLine(L1left); :};

SingleStatement ::= (SingleStatementc) DesignatorStatement:D1 SEMICOLON {: RESULT=new SingleStatementc(D1); RESULT.setLine(D1left); :}
				| (IfStmt) IF LPAREN ConditionIf:C1 Statement:S2 ELSE Statement:S3 {: RESULT=new IfStmt(C1, S2, S3); RESULT.setLine(C1left); :} 
				| (NoElseStmt) IF LPAREN ConditionIf:C1 Statement:S2 {: RESULT=new NoElseStmt(C1, S2); RESULT.setLine(C1left); :}
			 	| (DoStmt) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMICOLON {: RESULT=new DoStmt(S1, C2); RESULT.setLine(S1left); :}
				| (BreakStmt) BREAK SEMICOLON {: RESULT=new BreakStmt(); :}
				| (ContinueStmt) CONTINUE SEMICOLON {: RESULT=new ContinueStmt(); :}
				| (ReturnStmt) RETURN OptionalExpression:O1 SEMICOLON {: RESULT=new ReturnStmt(O1); RESULT.setLine(O1left); :}
				| (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
				| (PrintStmt) PRINT LPAREN Expr:E1 OptionalNumConst:O2 RPAREN SEMICOLON {: RESULT=new PrintStmt(E1, O2); RESULT.setLine(E1left); :}
				| (GotoStmt) GOTO Label:L1 SEMICOLON {: RESULT=new GotoStmt(L1); RESULT.setLine(L1left); :};
				
OptionalElse ::= (OptionalElsec) ELSE Statement:S1 {: RESULT=new OptionalElsec(S1); RESULT.setLine(S1left); :}
				| (NoOptionalElse) {: RESULT=new NoOptionalElse(); :} /* epsilon */;

OptionalExpression ::= (OptionalExpressionc) Expr:E1 {: RESULT=new OptionalExpressionc(E1); RESULT.setLine(E1left); :} 
					| (NoOptionalExpression) {: RESULT=new NoOptionalExpression(); :} /* epsilon */;

OptionalNumConst ::= (OptionalNumConstc) COMMA NUMBER:N1 {: RESULT=new OptionalNumConstc(N1); RESULT.setLine(N1left); :}
				| (NoOptionalNumConst) {: RESULT=new NoOptionalNumConst(); :} /* epsilon */;
				
				
Statements ::= (Statementsc) LBRACECURLY StatementList:S1 RBRACECURLY {: RESULT=new Statementsc(S1); RESULT.setLine(S1left); :};
StatementList ::= (StatementListc) StatementList:S1 Statement:S2 {: RESULT=new StatementListc(S1, S2); RESULT.setLine(S1left); :}
				| (NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */;				
				
DesignatorStatement ::= (DesignatorAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); :}
					| (DesignatorMethod) Designator:D1 LPAREN ActParsOptional:A2 RPAREN {: RESULT=new DesignatorMethod(D1, A2); RESULT.setLine(D1left); :}
					| (DesignatorIncrement) Designator:D1 INCREMENT {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
					| (DesignatorDecrement) Designator:D1 DECREMENT {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :};				
				
DesignatorStatementElements ::= (DesignatorStatementElementsc) Assignop:A1 Expr:E2 {: RESULT=new DesignatorStatementElementsc(A1, E2); RESULT.setLine(A1left); :}
					| LPAREN ActParsOptional:A1 RPAREN {: RESULT=new DesignatorStatementElementsDerived1(A1); RESULT.setLine(A1left); :} 
					| INCREMENT {: RESULT=new DesignatorStatementElementsDerived2(); :}
					| DECREMENT {: RESULT=new DesignatorStatementElementsDerived3(); :};				


ActParsOptional ::= (ActParsOptionalc) ActPars:A1 {: RESULT=new ActParsOptionalc(A1); RESULT.setLine(A1left); :} 
				| (NoActPars) {: RESULT=new NoActPars(); :} /* epsilon */;


ActPars ::= (ActParsc) Expr:E1 ExprCommaList:E2 {: RESULT=new ActParsc(E1, E2); RESULT.setLine(E1left); :};

ExprCommaList ::= (ExprCommaListc) ExprCommaList:E1 COMMA Expr:E2 {: RESULT=new ExprCommaListc(E1, E2); RESULT.setLine(E1left); :} 
				| (NoExprCommaList) {: RESULT=new NoExprCommaList(); :} /* epsilon */;

ConditionIf ::= (ConditionIfc) CondTerm:C1 CondTermListOr:C2 RPAREN {: RESULT=new ConditionIfc(C1, C2); RESULT.setLine(C1left); :}
			| (ErrorConditionIf) error RPAREN
		   	{: parser.report_error("Izvrsen oporavak do ) u liniji " + parser.lineDetected, null);  :} {: RESULT=new ErrorConditionIf(); :};

Condition ::= (Conditionc) CondTerm:C1 CondTermListOr:C2 {: RESULT=new Conditionc(C1, C2); RESULT.setLine(C1left); :};
CondTermListOr ::= (CondTermListOrc) CondTermListOr:C1 OR CondTerm:C2 {: RESULT=new CondTermListOrc(C1, C2); RESULT.setLine(C1left); :}
				| (NoCondTermListOr) {: RESULT=new NoCondTermListOr(); :} /* epsilon */;

CondTerm ::= (CondTermc) CondFact:C1 CondFactListAnd:C2 {: RESULT=new CondTermc(C1, C2); RESULT.setLine(C1left); :};
CondFactListAnd ::= (CondFactListAndc) CondFactListAnd:C1 AND CondFact:C2 {: RESULT=new CondFactListAndc(C1, C2); RESULT.setLine(C1left); :}
				| (NoCondFactListAnd) {: RESULT=new NoCondFactListAnd(); :} /* epsilon */;
				
CondFact ::= (CondFactc) Expr:E1 RelopOprOptional:R2 {: RESULT=new CondFactc(E1, R2); RESULT.setLine(E1left); :};				 
				
RelopOprOptional ::= (RelopOprOptionalc) Relop:R1 Expr:E2 {: RESULT=new RelopOprOptionalc(R1, E2); RESULT.setLine(R1left); :}
				| (NoRelopOprOptional) {: RESULT=new NoRelopOprOptional(); :} /* epsilon */;				
				
				
Expr ::= (Exprc) OptionalMinus:O1 Term:T2 AddopTermList:A3 {: RESULT=new Exprc(O1, T2, A3); RESULT.setLine(O1left); :};

OptionalMinus ::= (OptionalMinus) MINUS {: RESULT=new OptionalMinus(); :} 
			 | (NoOptionalMinus) {: RESULT=new NoOptionalMinus(); :} /* epsilon */;

AddopTermList ::= (AddopTermListc) AddopTermList:A1 Addop:A2 Term:T3 {: RESULT=new AddopTermListc(A1, A2, T3); RESULT.setLine(A1left); :}
				| (NoAddopTermList) {: RESULT=new NoAddopTermList(); :} /* epsilon */;

Term ::= (Termc) Factor:F1 MulopFactorList:M2 {: RESULT=new Termc(F1, M2); RESULT.setLine(F1left); :};

MulopFactorList ::= (MulopFactorListc) MulopFactorList:M1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactorListc(M1, M2, F3); RESULT.setLine(M1left); :}
				| (NoMulopFactorList) {: RESULT=new NoMulopFactorList(); :} /* epsilon */;


Factor ::= (Factorc) BaseExp:B1 ListBaseExp:L2 {: RESULT=new Factorc(B1, L2); RESULT.setLine(B1left); :};


Expop ::= (Expopc) DEGREE {: RESULT=new Expopc(); :};

ListBaseExp ::= (ListBaseExpc) ListBaseExp:L1 Expop:E2 BaseExp:B3 {: RESULT=new ListBaseExpc(L1, E2, B3); RESULT.setLine(L1left); :}
			| (NoListBaseExpc) {: RESULT=new NoListBaseExpc(); :} /* epsilon */;


BaseExp ::= (BaseExpc) NUMBER:N1 {: RESULT=new BaseExpc(N1); RESULT.setLine(N1left); :}
		| CHARCONST:C1 {: RESULT=new BaseExpDerived1(C1); RESULT.setLine(C1left); :}
		| BOOLCONST:B1 {: RESULT=new BaseExpDerived2(B1); RESULT.setLine(B1left); :}
		| NEW Type:T1 ExprBracesOptional:E2 {: RESULT=new BaseExpDerived3(T1, E2); RESULT.setLine(T1left); :}
		| LPAREN Expr:E1 RPAREN {: RESULT=new BaseExpDerived4(E1); RESULT.setLine(E1left); :}
		| Designator:D1 {: RESULT=new BaseExpDerived5(D1); RESULT.setLine(D1left); :}
		| (FuncCall) Designator:func LPAREN ActParsOptional:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :};
				
ExprBracesOptional ::= (ExprBracesOptionalc) LBRACE Expr:E1 RBRACE {: RESULT=new ExprBracesOptionalc(E1); RESULT.setLine(E1left); :}
					| (NoExprBracesOptional) {: RESULT=new NoExprBracesOptional(); :} /* epsilon */;
					
					
Designator ::= (Designatorc) DesignatorName:D1 {: RESULT=new Designatorc(D1); RESULT.setLine(D1left); :} 
			| (ArrayElem) DesignatorName:D1 LBRACE Expr:E2 RBRACE {: RESULT=new ArrayElem(D1, E2); RESULT.setLine(D1left); :}
			| DesignatorName:D1 DOT IDENT:I2 {: RESULT=new DesignatorDerived1(D1, I2); RESULT.setLine(D1left); :}
			| (ArrayElemClass) DesignatorName:D1 DOT IDENT:I2 LBRACE Expr:E3 RBRACE {: RESULT=new ArrayElemClass(D1, I2, E3); RESULT.setLine(D1left); :};

DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};


IdentList ::= (IdentListc) IdentList:I1 IdentListelem:I2 {: RESULT=new IdentListc(I1, I2); RESULT.setLine(I1left); :}
			| (NoIdentList) {: RESULT=new NoIdentList(); :} /* epsilon */;

IdentListelem ::= (IdentListelemc) DOT IDENT:I1 {: RESULT=new IdentListelemc(I1); RESULT.setLine(I1left); :}
				| LBRACE Expr:E1 RBRACE {: RESULT=new IdentListelemDerived1(E1); RESULT.setLine(E1left); :};
	
DotOrExpr ::= (DotOrExprc) DOT IDENT:I1 {: RESULT=new DotOrExprc(I1); RESULT.setLine(I1left); :} 
			| LBRACE Expr:E1 RBRACE {: RESULT=new DotOrExprDerived1(E1); RESULT.setLine(E1left); :};
			
Label ::= (Labelc) IDENT:I1 {: RESULT=new Labelc(I1); RESULT.setLine(I1left); :};

Assignop ::= (Assignopc) ASSIGN {: RESULT=new Assignopc(); :};

Relop ::= (Relopc) EQUAL {: RESULT=new Relopc(); :}
		| NOTEQUAL {: RESULT=new RelopDerived1(); :}
		| GREATER {: RESULT=new RelopDerived2(); :}
		| GREATEREQUAL {: RESULT=new RelopDerived3(); :}
		| LOWER {: RESULT=new RelopDerived4(); :}
		| LOWEREQUAL {: RESULT=new RelopDerived5(); :};
		
Addop ::= (AddOpc) PLUS {: RESULT=new AddOpc(); :} | MINUS {: RESULT=new AddopDerived1(); :};

Mulop ::= (Mulopc) MUL {: RESULT=new Mulopc(); :} | DIV {: RESULT=new MulopDerived1(); :} | MOD {: RESULT=new MulopDerived2(); :};


VarArgs ::= (VarArgsc) Type:T1 THREEDOTS IDENT:I2 {: RESULT=new VarArgsc(T1, I2); RESULT.setLine(T1left); :};

