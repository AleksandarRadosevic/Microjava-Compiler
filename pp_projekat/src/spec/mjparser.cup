
terminal PROG, IDENT, LBRACECURLY, RBRACECURLY, CONST, ASSIGN, NUMBER, CHARCONST, BOOLCONST;
terminal COMMA, CLASS, EXTENDS, RECORD, LPAREN, RPAREN, VOID, PRINT, GOTO, AND, NEW;
terminal IF, SEMICOLON, LPAREN, RPAREN, DO, WHILE, BREAK, CONTINUE, RETURN, READ, LBRACE, RBRACE, INCREMENT, DECREMENT;
nonterminal Program, DeclarationList, MethodDeclList ConstDecl, VarDecl, ClassDecl, RecordDecl, Type, ConstVal, ConstDeclList;
nonterminal OptionalBraces, VarDeclList ClassDecl, ConstDeclRepeat, VarDeclRepeat, OptionalExtends, DeclListVar;
nonterminal OptConstructorMethod, ConstructorDecl, OptionalConstructorDecl, DeclListMethod, StatementList, TypeOrVoid;
nonterminal FormParsOptional, Statement, FormPars, Pars, ParsList, SingleStatement, OptionalLabelColon, Label, LabelColon;
nonterminal Condition, OptionalElse, Designator, DesignatorStatement, DesignatorStatementElements, ExprCommaList;
nonterminal Expr, OptionalNumConst, Statements, OptionalExpression, Assignop, ActParsOptional, ActPars, CondTerm;
nonterminal CondTermListOr, CondFactListAnd, CondFact, RelopOprOptional, Relop, OptionalMinus, Term, AddopTermList;
nonterminal Addop, Factor, MulopFactorList, Mulop, ActParsBracesOptional, ExprBracesOptional;



Program ::= (Program) PROG IDENT DeclarationList LBRACECURLY DeclListMethod RBRACECURLY;

DeclarationList ::= (Declarations) DeclarationList DeclList
				|
				(NoDeclarations) /* epsilon */;
				
DeclList ::= (DeclLists)  
				ConstDecl  |
				VarDecl    | 
				ClassDecl  | 
				RecordDecl;
			
/* const start */	
ConstDecl ::= (ConstDecl) ConstDeclRepeat ConstDeclList SEMICOLON;

ConstDeclRepeat ::= (ConstDeclRepeat) CONST Type:constType IDENT ASSIGN ConstVal;

ConstVal ::= (ConstVal) NUMBER | CHARCONST | BOOLCONST;

ConstDeclList ::= (ConstDeclList) ConstDeclList ConstDeclRepeat  
				|
				(NoConstDecl) /* epsilon */;
	
/* const finish */	

/* var start */
VarDecl ::= (VarDecl) VarDeclRepeat VarDeclList;

VarDeclRepeat ::= (VarDeclRepeat) Type:varType IDENT OptionalBraces;

OptionalBraces ::= (OptionalBraces) LBRACE RBRACE 
				|
				(NoOptionalBraces) /* epsilon */;

VarDeclList ::= (VarDeclList) VarDeclList COMMA VarDeclRepeat  
				|
				(NoVarDeclList) /* epsilon */;
	
/* var end */

/* class start */
			
ClassDecl ::= (ClassDecl) CLASS IDENT OptionalExtends LBRACECURLY DeclListVar OptConstructorMethod RBRACECURLY;			 

OptionalExtends ::= (OptionalExtends) EXTENDS Type;
 
DeclListVar ::=	(DeclListVar) DeclListVar VarDecl 
				|
				(NoDeclListVar) /* epsilon */;	


OptConstructorMethod ::= (OptConstructorMethod) LBRACECURLY OptionalConstructorDecl DeclListMethod RBRACECURLY
				|
				(NoOptConstructorMethod) /* epsilon */;	
				
OptionalConstructorDecl ::= (OptionalConstructorDecl) ConstructorDecl
				|
				(NoOptionalConstructorDecl) /* epsilon */;	
				
DeclListMethod ::= (DeclListMethod) DeclListMethod MethodDecl 
				|
				(NoDeclListMethod) /* epsilon */;	

/* class end */


RecordDecl ::= (RecordDecl) RECORD IDENT LBRACECURLY DeclListVar RBRACECURLY;

ConstructorDecl ::= (ConstructorDecl) IDENT LPAREN RPAREN DeclListVar LBRACECURLY StatementList RBRACECURLY

/* method start */

MethodDecl ::= (MethodDecl) TypeOrVoid IDENT LPAREN FormParsOptional RPAREN DeclListVar LBRACECURLY StatementList RBRACECURLY

TypeOrVoid ::= (TypeOrVoid) Type | VOID;

FormParsOptional ::= (FormParsOptional) FormParams
				| (NoFormParsOptional) /* epsilon */;
						
/* method end */
	
/* pars type start */

FormPars ::= (FormPars) Pars ParsList;
		
Pars ::= (Pars) Type IDENT OptionalBraces;

ParsList ::= (ParsList) ParsList COMMA Pars 
			|
			(NoParsList) /* epsilon */;

Type ::= IDENT;

/* pars type end */

Statement ::= OptionalLabelColon SingleStatement |
			Statements;

OptionalLabelColon ::= (OptionalLabelColon) LabelColon |
					(NoOptionalLabelColon) /* epsilon */;

LabelColon ::= Label COLON;

SingleStatement ::= DesignatorStatement SEMICOLON
				| IF LPAREN Condition RPAREN Statement OptionalElse
			 	| DO Statement WHILE LPAREN RPAREN Condition SEMICOLON
				| BREAK SEMICOLON
				| CONTINUE SEMICOLON
				| RETURN OptionalExpression SEMICOLON
				| READ LPAREN Designator RPAREN SEMICOLON
				| PRINT LPAREN Expr OptionalNumConst RPAREN SEMICOLON
				| GOTO Label SEMICOLON;
				
OptionalElse ::= (OptionalElse) ELSE Statement
				| (NoOptionalElse) /* epsilon */;

OptionalExpression ::= (OptionalExpression) Expr 
					| (NoOptionalExpression) /* epsilon */;

OptionalNumConst ::= (OptionalNumConst) COMMA NUMBER
				| (NoOptionalNumConst) /* epsilon */;
				
				
Statements ::= (Statements) LBRACECURLY StatementList RBRACECURLY;
StatementList ::= (StatementList) StatementList Statement
				| (NoStatementList) /* epsilon */;				
				
DesignatorStatement ::= (DesignatorStatement) Designator DesignatorStatementElements 				
				
DesignatorStatementElements ::= (DesignatorStatementElements) Assignop Expr
					| LPAREN ActParsOptional RPAREN 
					| INCREMENT
					| DECREMENT;				


ActParsOptional ::=  (ActParsOptional) ActPars 
				| (NoActPars) /* epsilon */;


ActPars ::= (ActPars) Expr ExprCommaList;

ExprCommaList ::= (ExprCommaList) ExprCommaList COMMA Expr 
				| (NoExprCommaList) /* epsilon */;


Condition ::= (Condition) CondTerm CondTermListOr;
CondTermListOr ::= (CondTermListOr) CondTermListOr OR CondTerm
				| (NoCondTermListOr) /* epsilon */;

CondTerm ::= (CondTerm) CondFact CondFactListAnd;
CondFactListAnd ::= (CondFactListAnd) CondFactListAnd AND CondFact
				| (NoCondFactListAnd) /* epsilon */;
				
CondFact ::= (CondFact) Expr RelopOprOptional;				 
				
RelopOprOptional ::= (RelopOprOptional) Relop Expr
				| (NoRelopOprOptional) /* epsilon */;				
				
				
Expr ::= (Expr) OptionalMinus Term AddopTermList;


AddopTermList ::= (AddopTermList) AddopTermList Addop Term
				| (NoAddopTermList) /* epsilon */;

Term ::= (Term) Factor MulopFactorList;

MulopFactorList ::= (MulopFactorList) MulopFactorList Mulop Factor;

Factor ::= (Factor) Designator ActParsBracesOptional
		| NUMBER
		| CHARCONST
		| BOOLCONST
		| NEW Type ExprBracesOptional
		| LPAREN Expr RPAREN;
		
ActParsBracesOptional ::= (ActParsBracesOptional) LPAREN ActParsOptional RPAREN 		
						| (NoActParsBracesOptional) /* epsilon */;
		
ExprBracesOptional ::= (ExprBracesOptional)	LBRACE Expr RBRACE	
					| (NoExprBracesOptional) /* epsilon */;
					
					
Designator ::= (Designator) IDENT IdentList;

IdentList ::= () 
